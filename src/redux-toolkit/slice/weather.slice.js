/* 
1. Weather Slice Definition (weatherSlice):
Name: "weather"
Initial State:
loading: A boolean indicating whether the weather data is currently being fetched.
weatherReport: An object to store the current weather report for a specific city.
dataStatus: A string to store the status of the API data (e.g., success or failure).
weatherReportAll: An array to store all the fetched weather reports.

2. Redux Extra Reducers:
Handles asynchronous actions (getWeatherReport, weatherReportAll) using Redux Toolkit's createAsyncThunk.
Handles pending, fulfilled, and rejected states for each asynchronous action.

3. Async Thunks (getWeatherReport, weatherReportAll):

getWeatherReport:
Fetches the current weather report for a specific city using Axios and the OpenWeatherMap API.
Returns the fetched weather report.

weatherReportAll:
Fetches the current weather report for a specific city using Axios and the OpenWeatherMap API.
Appends the fetched weather report to the weatherReportAll array.
Returns the fetched weather report.

4. Exported Actions:
weatheActions: Contains the actions generated by the createSlice for handling state updates.

5. Exported Default:
The default export is the created weatherSlice, which includes the slice's reducer and actions.
*/

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { apiDetails } from "../../api_credentials/apiCredential";
import axios from "axios";

const initialState = {
    loading: false,
    weatherReport: {},
    dataStatus: '',
    weatherReportAll: []
}

const weatherSlice = createSlice({
    name: "weather",
    initialState: initialState,
    extraReducers: (builder) => {
        builder
            .addCase(getWeatherReport.pending, (state, action) => {
                state.loading = true
            })

            .addCase(getWeatherReport.fulfilled, (state, action) => {
                state.weatherReport = action.payload
                state.loading = false
            })

            .addCase(getWeatherReport.rejected, (state, action) => {
                state.dataStatus = "API Failed";
            })

            .addCase(weatherReportAll.pending, (state, action) => {
                state.fetchingError = false;
            })
            .addCase(weatherReportAll.fulfilled, (state, action) => {
                if (!state.weatherReportAll.includes(action.payload))
                    state.weatherReportAll.push(action.payload)
                state.fetchingError = false;
            })
            .addCase(weatherReportAll.rejected, (state, action) => {
                state.fetchingError = true;
            })
    }
})

export const weatheActions = weatherSlice.actions;
export default weatherSlice;

export const getWeatherReport = createAsyncThunk("weather/get", async (city = "Bangalore") => {
    const weatherCity = await axios.get(`${apiDetails.baseApiForCurrentWeather}q=${city}&limit=2&appid=${apiDetails.key}`);
    const weatherCityResult = await weatherCity.data;
    return weatherCityResult
})

export const weatherReportAll = createAsyncThunk("weather/getall", async (city = "Bangalore") => {
    const weatherCity = await axios.get(`${apiDetails.baseApiForCurrentWeather}q=${city}&limit=2&appid=${apiDetails.key}`);
    const weatherCityResult = await weatherCity.data;
    return weatherCityResult
})